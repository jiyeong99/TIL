#  Python

### 1. 개념

#### 	1.1 파이썬 기초

- Easy to learm

- 다른 프로그래밍 언어보다 문법이 간단하면서도 엄격하지 않음

  - 예시 : 변수에 별도의 타입 지정이 필요없음

- 문법 표현이 다른 언어에 비해 매우 간결함 짧은 시간 내에 마스터 할 수 있음

- 인터프리터 언어(Interpreter)

  - 소스코드를 기계어로 변환하ㅡㄴ 컴파일 과정 없이 바로 실행 가능

  - 코드를 대화하듯 한 줄 입력하고 실행 한 후, 바로 확인할 수 있음

    - ```python
      2 + 2 	# 사용자가 입력 (input)
      		# 컴퓨터가 대답 (output)
      ```

- 객체 지향 프로그래밍(Object Oriented Programming)
  - 파이썬은 객체 지향 언어이며, 모든 것이 객체로 구현되어 있음
    - 객체(Object) : 숫자, 문자, 클래스 등 값을 가지고 있는 모든 것
- 코드 스타일 가이드
  - 코드를 '어떻게 작성할 지에 대한 가이드'
  - [파이썬에서 추천하는 스타일 가이드(PEP8)](https://peps.python.org/pep-0008/)

#### 1.2 변수

- 변수(Variable)

  - 변수는 할당 연산자(=)를 통해 값을 확보

  - type()

  - 변수에 할당된 값의 타입

    

- 식별자(identifiers)

  - 내장함수나 모듈과 동일한 이름의 변수는 만들면 안돼요

  - input()

    - ```python
      name = input('이름을 입력해주세요:')
      print(name)
      >>> 이름을 입력해주세요: 김해킹
      ```

      

- 논리 연산자(Logical Operator)

  - 논리형 bool()

    - and : 모두 참인 경우 참, 그렇지 않으면 거짓

    - or : 둘 중 하나만 참이라도 참, 그렇지 않으면 거짓

    - not : 참, 거짓의 반대의 결과

    - ```python
      num = 100
      num >= 100 and num % 3 ==1
      #true or false?
      >>> true
      ```

    

- 수치형(Numeric Type)

  - 정수형 int

    - Python의 모든 정수의 타입은 int형
    - 오버플로우가 발생하지 않음

  - 실수형 float

    - 정수가 아닌 모든 실수는 float 타입

    - 부동소수점

      - 실수를 컴퓨터가 표현하는 방법 - 2진수(비트)로 숫자를 표현

      - 값비교하는 과정에서 정수가 아닌 실수인 경우 주의할 것

        ```python
        # 아래는 참일까? 거짓일까?
        3.14 - 3.02 == 0.12 # XXXXXXXX
        # 0.1200000000000001
        ```

      - 매우 작은 수 보다 작은지를 확인하거나 math 모듈 활용

      - ```python
        # 1. 임의의 작은 수
        abs(a - b) <= 1e - 10
        # 2. 모듈활용
        
        ```

  - 복소수(안쓸거에요)

- 산술연산자(Arithmetic Operator)

  - 기본적인 사칙연산 및 수식 계산
  - %(나머지, 짝수홀수?), /(나눗셈), //(몫), **(거듭제곱 주의)

- 비교 연산자(Comparison Operator)

  - 값을 비교하며, True / False 값을 리턴함

- 문자열(String Type)

  - 모든 문자는 str 타입
  - 작은 따옴표(')나 큰 따옴표 (")로 표현
  - 삼중따옴표(''')
    - 문장안에 문장안에 문장 구분 가능
    - 여러줄 주석 처리

- 인덱싱은 나중에 하겠지만

  - 0부터 시작
  - [0 : 3] 0이상 3 미만

- 결합(Concatenation)

  ```python
  'hello,' + 'python!'
  # 'hello, python!'
  ```

  

- 반복(Repetition)

  ```python
  'hi!' * 3
  # hi!hi!hi!
  ```

  

- 포함(Membership)

  ```python
  'a' in 'apple'
  # True
  'app' in 'apple'
  # True
  'b' in 'apple'
  # False
  ```

  

- 무적의 f

  - 변수 타입이 다른것끼리 못합쳐요

  - 까탈스럽게 구네

  - format을 해버립시다

  - ```python
    py = 999
    print(f'안녕 {py}')
    >>> 안녕999
    ```

- 변수 변환

  - ```python
    py = 999
    print('안녕'+str(py)+'하세요')
    >>> 안녕999하세요
    ```

#### 1.3 자료형

- 리스트

  ```python
  #리스트
  #다양한값들의 배열,나열,시퀀스
  #인덱스=순서로 접근
  student = ['동현','효근','수경','나연','다경','예지']
  ```

  

- 딕셔너리

  ```python
  #딕셔너리
  #키-값의 쌍
  #키로 접근
  student = {
      '1회차' : ['동현', '효근']
      '2회차' : ['수경', '나연']
      '3회차' : ['다경', '예지']
  }
  ```

- ```python
  movie = {
  	'title' : '설국열차'
  	'마ㅣ어림'
  }
  ```

- 딕셔너리에 키와 값의 쌍을 추가할 수 있으며,

- 이미 해당하는 키가 있다면 기존 값이 변경됩니다.

